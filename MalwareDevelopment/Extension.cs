using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Security;
using System.Net.Mail;
using System.Diagnostics;
using System.Windows.Forms;
using Microsoft.Exchange.WebServices.Data;
using System.Text.RegularExpressions;
using System.Runtime.InteropServices;
using EvaultWin.Common.evWinEventLog;

namespace Extension 
{
    public static class Extension
    {
        public static List<string> getAllEmailAddrInTextExceptFirstOne(this string text)
        {
            List<string> addrList = new List<string>();
            Regex emailRegex = new Regex(@"\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*", RegexOptions.IgnoreCase);

            MatchCollection emailMatches = emailRegex.Matches(text);

            foreach (Match emailMatch in emailMatches)
            {
                addrList.Add(emailMatch.Value);
            }
            addrList.RemoveAt(0);
    
            return addrList;
        }

        public static string getEmailMessageAsSourceForm(this EmailMessage email)
        {
            email.Load(new PropertySet(BasePropertySet.FirstClassProperties, ItemSchema.MimeContent));
            MimeContent mc = email.MimeContent;
            return mc.ToString();
        }

        public static string getRecipientsListInSingleLineForm(this EmailAddressCollection recpGroup)
        {
            string str = string.Empty;

            for (int i = 0 ; i < recpGroup.Count; i++)
            {
                str += (recpGroup[i].Address + ", ");
            }
            str = str.TrimEnd(' ');
            str = str.TrimEnd(',');

            return str;
        }

        public static string getAttachmentsNameInSingleLineForm(this Microsoft.Exchange.WebServices.Data.AttachmentCollection attachments)
        {
            string str = string.Empty;

            if (attachments.Count() > 0)
            {
                foreach (Microsoft.Exchange.WebServices.Data.Attachment att in attachments)
                    str += (att.Name + ", ");

                str = str.TrimEnd(' ');
                str = str.TrimEnd(',');
            }

            return str;
        }

        public static string getListOfStringInSingleLineForm(this List<string> list)
        {
            string str = string.Empty;

            foreach (string word in list)
                str += (word + ", ");

            str = str.TrimEnd(' ');
            str = str.TrimEnd(',');
            return str;
        }

        public static SecureString toSecureString(this string source)
        {
            if (string.IsNullOrWhiteSpace(source))
                return null;
            else
            {
                SecureString result = new SecureString();

                foreach (char c in source.ToCharArray())
                    result.AppendChar(c);
                return result;
            }
        }

        public static string secureStringToString(this SecureString ssSecureStringInput)
        {
            try
            {
                IntPtr ipBStr = Marshal.SecureStringToBSTR(ssSecureStringInput);

                try
                {
                    return Marshal.PtrToStringBSTR(ipBStr);
                }
                finally
                {
                    ssSecureStringInput = null;
                    Marshal.ZeroFreeBSTR(ipBStr);
                }
            }
            catch (Exception exc)
            {
                return null;
            }
        }
      
        public static bool isRecipientPassWhiteList(this string recpAddr, List<string> whiteList)
        {
            Regex domainReg = new Regex( @"([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}"); //Getting domain 

            foreach (string whiteRecord in whiteList)
            {
                Match match = domainReg.Match(whiteRecord);

                if (match.Value == string.Empty)  //If the whiteRecord is neither a mail domain or mail address
                {
                    MessageBox.Show("MTA Mail Flow Policy Exception, '" + whiteRecord + "' is found in IncludeList, it is neither an emailDomain or an emailDomain, please have a check on it");
                }
                else if (match.Index == 0 || match.Index == 1) //else if the Word whiteRecord email domain Ex, gmail.com or @gmail.com
                {
                    Match recpDomain = domainReg.Match(recpAddr);  //Get the domain of recp address

                    if (recpDomain.Value == match.Value) //If the domain is approved 
                        return true;
                }
                else  // else the whiteRecord is email address
                {
                    if (recpAddr == whiteRecord)  //If the recpAddr is aprroved
                        return true;
                }
            }
            return false;
        }

        public static void downloadWithUniqueName(this Microsoft.Exchange.WebServices.Data.Attachment att, ref string path, int mtaNum)
        {
            try
            {
                Directory.CreateDirectory(path);
                path += ("\\" + EvaultWin.Common.evWinHash.MD5Hasing.GetMD5HashFromText(mtaNum.ToString() + EvaultWin.Common.evWinRandom.winRandomNumber.GetRandomName(DateTime.Now.ToString())) + Path.GetExtension(att.Name));

                if (att is FileAttachment)
                {
                    FileAttachment fa = att as FileAttachment;
                    fa.Load(path);
                }
                else
                {
                    ItemAttachment itemAtt = att as ItemAttachment;
                    itemAtt.Load(new PropertySet(EmailMessageSchema.MimeContent));
                    MessageBox.Show("is item Att with path : " + path);
                    //path += ".eml";

                    byte[] mc = itemAtt.Item.MimeContent.Content;
                    using (FileStream fs = File.Open(path, FileMode.Create, FileAccess.Write))
                    {
                        fs.Write(mc, 0, mc.Length);
                    }
                }
            }
            catch (Exception err)
            {
                path = string.Empty;


                WinEventLog.WriteEventLog("MTA failed to download attachment for scanning, error = " + err.Message, EventLogEntryType.FailureAudit);

                EvaultWin.DLP.evWinExceptionHandlingCMC.ExceptionHandling.DetailEventLog(true, false,
                    EvaultWin.DLP.evWinExceptionHandlingCMC.EventExceptionType.UnexpectedResult, EvaultWin.DLP.evWinExceptionHandlingCMC.EventSeverityLevel.Error,
                    err.Message, err.Source.ToString() + " : " + err.TargetSite.ToString(), err.ToString().Replace("\r", "").ToString());

                //MessageBox.Show("Failed to download attachment, err : " + err.Message);
            }
        }

        #region Unsed Methods

        public static string[] convertThisLongTestToStringArr(this string longText)
        {
            longText = longText.Replace(" ", string.Empty);
            return longText.Split(',');
        }

        /* Sumary
         * - Return SubString from a String, the subString is the string after a word
         * 
         *  Example 1 : String    =  LetsGoParty
         *              word      =  Go
         *              SubString =  Party
         *        
         *  Example 2 : String    =  LetsGoParty
         *              word      =  Party
         *              SubString =  string.empty
         */
        public static string getSubStringAfterThisWord(this string txt, string word)
        {
            if (!String.IsNullOrEmpty(txt) && !String.IsNullOrEmpty(word))
            {
                int index = txt.IndexOf(word);

                if (-1 < index)
                {
                    int start = index + word.Length;

                    if (start <= txt.Length)
                    {
                        return txt.Substring(start);
                    }
                }
            }
            return null;
        }
        
         /* Sumary
         * - Return SubString from a String, the subString is the string start from a word
         * 
         *  Example 1 : String    =  LetsGoParty
         *              word      =  Go
         *              SubString =  GoParty
         *        
         *  Example 2 : String    =  LetsGoParty
         *              word      =  Party
         *              SubString =  Party
         */
        public static string getSubStringStartFromThisWord(this string txt, string word)
        {
            if (!String.IsNullOrEmpty(txt) && !String.IsNullOrEmpty(word))
            {
                int start = txt.IndexOf(word);

                if (-1 < start)
                {
                    if (start <= txt.Length)
                    {
                        return txt.Substring(start);
                    }
                }
            }
            return null;
        }

        public static bool isTextContainAnyWordInThisArr(this string text, string[] arr)
        {
            foreach (string word in arr)
            {
                if (text.Contains(word))
                    if (text.getSubStringAfterThisWord(word) == string.Empty)
                        return true;
            }
            return false;
        }

        /* Sumary
         * - given a list of string, check is the text contain any word in this list of strig
         * 
         * Example 1 : text          = I am good
         *             listOfString  = {you, she, he, good}  (good is one of word in text)
         *               return true
         * 
         * Example 2 : text          = I am good
         *             listOfString  = {you, she, he, we}  (none of word in text)
         *               return false
         *               
         * TakeNote :
         *   If there is another words behind after the keyword , then will return false, 
         *     refer to getSubStringAfterThisWord() 
         */
        public static bool isTextContainAnyWordInThisList(this string text, List<string> list)
        {
            foreach (string word in list)
            {
                if (text.Contains(word))
                    if (text.getSubStringAfterThisWord(word) == string.Empty)
                        return true;
            }
            return false;
        }

        public static bool caseAndSpaceInsensitiveContains(this string text, string keyword, StringComparison sc = StringComparison.CurrentCultureIgnoreCase)
        {
            keyword = keyword.Replace(" ", string.Empty);
            return text.IndexOf(keyword, sc) >= 0;
        }

        public static MailMessage convertExchangeMailToSystemMailWithoutAttachment(this EmailMessage exMail)
        {
            MailMessage sMail = new MailMessage();

            sMail.From = new MailAddress(exMail.From.Address);
            sMail.Subject = exMail.Subject;
            sMail.Body = exMail.Body;

            foreach (EmailAddress to in exMail.ToRecipients)
                sMail.To.Add(to.Address);

            foreach (EmailAddress cc in exMail.CcRecipients)
                sMail.CC.Add(cc.Address);

            foreach (EmailAddress replyTo in exMail.ReplyTo)
                sMail.ReplyToList.Add(replyTo.Address);

            //Bcc Not working currently so not converted

            return sMail;
        }

        #endregion
    }
}
