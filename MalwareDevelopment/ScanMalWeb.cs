using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.IO;
using System.Windows.Forms;
using System.Text.RegularExpressions;

namespace MalwareDevelopment
{
    class ScanMalWeb
    {
        public ScanMalWeb() { }

        /* Get list Malware IP Address that current computer connected
         * 
         * Process
         * 1. Get list of IP Address that current computer connected''
         * 2. Get list of Mal Website from txt file
         * 3. Get comman items in this two list
         * 4. Return them
         */
        public List<string> getListOfFoundMalWeb()
        {
            List<string> currentConnections = getListOfCurrentConnections();
            List<string> malWebList = getMalWebList();

            IEnumerable<string> result = currentConnections.Intersect(malWebList);

            return result.ToList();
        }

        public void killProcessThatConnectMalWeb()
        {
            string output = getNetStatOutput("-no");


            List<string> malWebList = getMalWebList();


        }

        /* Get list of IP Address that your computer current connected by using netstat  
         * 
         * Refference
         * https://www.howtogeek.com/98601/easily-monitor-your-computers-internet-connection-activity/
         * 
         * Process
         * 1. Call the netstat.exe and proceed command '-a -n -o'
         * 2. Pass the process's output into 'result'
         * 3. Get all public Address in 'result', then pass to 'currentConnections' in list form.
         */
        private List<string> getListOfCurrentConnections()
        {
            List<string> currentConnections = new List<string>();

            string output = getNetStatOutput();

            output = removeNotEstablishedAddr(output);
            currentConnections = getPublicIpAddrInThisText(output);

            return currentConnections;
        }

        private string getNetStatOutput(string argument = "-n")
        {
            string output = string.Empty;

            try
            {
                Process p = new Process();
                ProcessStartInfo pI = new ProcessStartInfo();
                pI.Arguments = argument;
                pI.FileName = "netstat.exe";
                pI.UseShellExecute = false;
                pI.CreateNoWindow = true;
                pI.WindowStyle = ProcessWindowStyle.Hidden;
                pI.RedirectStandardInput = true;
                pI.RedirectStandardOutput = true;
                pI.RedirectStandardError = true;
                p.StartInfo = pI;
                p.Start();

                output = p.StandardOutput.ReadToEnd();
            }
            catch (Exception err)
            {
                string errMss = err.Message;
            }
            return output;
        }

        private string removeNotEstablishedAddr(string ori)
        {
            List<string> list = ori.Split(Environment.NewLine.ToCharArray()).ToList();
            list = list.Where(x => x.Contains("ESTABLISHED")).ToList();

            return string.Join(Environment.NewLine, list);
        }



        private bool KillProcessByID(int id, bool waitForExit = false)
        {
            using (Process p = Process.GetProcessById(id))
            {
                if (p == null || p.HasExited) return false;

                p.Kill();
                if (waitForExit)
                {
                    p.WaitForExit();
                }
                return true;
            }
        }

        /*
            \b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.
            (25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.
            (25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.
            (25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b
         */
        private List<string> getPublicIpAddrInThisText(string text)
        {
           
            string ipRegex = @"\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b";
            Regex reg = new Regex(ipRegex, RegexOptions.IgnoreCase);
            MatchCollection mc = reg.Matches(text);

            List<string> list = mc.Cast<Match>().Select(match => match.Value).ToList();


            return list;
        }

        private List<string> getMalWebList()
        {
            string[] lines = System.IO.File.ReadAllLines(@"malwareDomainList.txt");
            return lines.ToList();
        }
        
    }
}
